name: New Release

on:
  milestone:
    types: [closed]

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Project Version
        id: get_version
        uses: mod-posh/GetProjectVersion@main
        with:
          Filename: 'Directory.Build.props'
          verbose: "verbose"

      - name: Create Release Notes
        uses: mod-posh/Issue2ReleaseNotes@v0.0.3.3
        with:
          milestone_number: ${{ github.event.milestone.number }}
          verbose: 'verbose'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Latest Changes
        run: git pull origin ${{ github.ref_name }}
        shell: bash

      - name: Create Release
        uses: mod-posh/NewTaggedRelease@v0.0.3.2
        with:
          name: 'Release v${{ env.VERSION }}'
          filename: 'RELEASE.md'
          version: ${{ env.VERSION }}
          verbose: 'verbose'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install PowerShell
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Update README using custom action
        uses: mod-posh/UpdateReadme@main
        with:
          project_name: "${{ vars.PROJECT_NAME }}"
          project_names: "Xml2Doc.Core,Xml2Doc.Cli,Xml2Doc.MSBuild"
          verbose: 'verbose'

      - name: Build Project
        run: dotnet build ${{ github.workspace }}/Xml2Doc/Xml2Doc.sln --configuration Release

      - name: Pack Projects Individually
        run: |
          # Pack Core Library first (since others depend on it)
          dotnet pack ${{ github.workspace }}/Xml2Doc/src/Xml2Doc.Core/Xml2Doc.Core.csproj --configuration Release --output ./publish --no-build

          # Pack CLI Tool
          dotnet pack ${{ github.workspace }}/Xml2Doc/src/Xml2Doc.Cli/Xml2Doc.Cli.csproj --configuration Release --output ./publish --no-build

          # Pack MSBuild Package
          dotnet pack ${{ github.workspace }}/Xml2Doc/src/Xml2Doc.MSBuild/Xml2Doc.MSBuild.csproj --configuration Release --output ./publish --no-build

      - name: Push to NuGet
        run: dotnet nuget push ./publish/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Install Project CLI Tool
        run: dotnet tool install --global --add-source ./publish Xml2Doc.Cli

      - name: Generate Documentation
        run: |
          # Find the Core XML documentation file
          xmlDocFile="${{ github.workspace }}/Xml2Doc/src/Xml2Doc.Core/bin/Release/net9.0/Xml2Doc.Core.xml"

          if [ -f "$xmlDocFile" ]; then
            echo "Generating docs from: $xmlDocFile"
            xml2doc --xml "$xmlDocFile" --out Docs
          else
            echo "Error: XML documentation file not found!"
            echo "Contents of build directory:"
            ls -la ${{ github.workspace }}/Xml2Doc/src/Xml2Doc.Core/bin/Release/net9.0/ || echo "Directory not found"
            exit 1
          fi

      - name: Run markdownlint-cli2-action
        uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: '**/*.md'
          fix: true

      - name: Commit Documentation Changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are any changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing..."

            # Stage all changes (documentation and any markdownlint fixes)
            git add .

            # Commit the changes
            git commit -m "Update documentation and fix markdown formatting for release v${{ env.VERSION }}"

            # Pull any remote changes and push
            git pull --rebase origin ${{ github.ref_name }} || true
            git push origin ${{ github.ref_name }}
          else
            echo "No changes to commit"
          fi
        if: success()
